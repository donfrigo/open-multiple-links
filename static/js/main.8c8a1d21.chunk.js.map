{"version":3,"sources":["components/link_opener.js","App.js","serviceWorker.js","index.js"],"names":["validateLink","link","test","escapeRegExp","string","replace","e","this","setState","error","addHTTPS","concat","LinkOpener","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","term","onInputChange","bind","assertThisInitialized","onFormSubmit","addLinksToInput","event","target","value","preventDefault","openLinks","history","push","links","links_array","split","i","length","escaped","trim","window","open","qs","parse","location","search","ignoreQueryPrefix","linkString","keys","forEach","key","index","slice","react_default","a","createElement","onSubmit","className","placeholder","onChange","type","Component","App","BrowserRouter","Route","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c8a1d21.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport qs from 'query-string';\n\nclass LinkOpener extends Component{\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: '',\n            error: false\n        };\n\n        this.onInputChange = this.onInputChange.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.addLinksToInput = this.addLinksToInput.bind(this);\n    }\n\n    onInputChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    onFormSubmit(event) {\n        event.preventDefault();\n\n        // open links\n        this.openLinks(this.state.term);\n        this.setState({ term: ''});\n\n        //redirect to link search\n        this.props.history.push(\"/open-multiple-links\");\n    }\n\n    openLinks (links) {\n\n        let links_array = links.split(',');\n\n        for(var i = 0; i < links_array.length; i++) {\n            // remove whitespaces\n            let link = links_array[i].trim()\n            let escaped = escapeRegExp(link)\n            escaped = addHTTPS(escaped)\n            if (validateLink(escaped)){\n                window.open(escaped, i);\n            }\n        }\n    }\n\n    addLinksToInput(term) {\n       this.setState({term})\n    }\n\n    componentDidMount() {\n        let links = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\n\n        let linkString = '';\n\n        try {\n            Object.keys(links).forEach(function(key,index) {\n\n                const escaped = escapeRegExp(links[key])\n                if (validateLink(escaped)){\n                    linkString = linkString.concat(escaped,', ')\n                }\n            });\n\n            // get rid of last comma and space\n            linkString = linkString.slice(0, -2)\n\n            this.addLinksToInput(linkString)\n        }\n        catch (e) {\n            this.setState({error: true})\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onFormSubmit} className='input-group'>\n                    <input\n                        placeholder='www.youtube.com, www.gmail.com'\n                        className='form-control'\n                        value={this.state.term}\n                        onChange={this.onInputChange} />\n                    <span className='input-group-btn'>\n                   <button type='submit' className='btn btn-secondary'>Submit</button>\n               </span>\n                </form>\n                <br />\n                {this.state.error &&\n                <div className=\"alert alert-danger\">\n                    An error has occured! Please check your input!\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nfunction validateLink(link) {\n    const re = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n    return re.test(link);\n}\n\nfunction escapeRegExp(string){\n\n    try {\n        return string.replace(/[<*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    }\n    catch (e) {\n        this.setState({error: true})\n    }\n}\n\nfunction addHTTPS(link) {\n    const re = /^(http|https):/i\n    const https = 'https://'\n\n    if (!re.test(link)) {\n        // if no http:// or https://\n        // then we add https\n        return `${https}${link}`\n    }\n   return link\n}\n\nexport default LinkOpener","import React, { Component } from 'react';\nimport './App.css';\nimport LinkOpener from './components/link_opener';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n          <br />\n          <h4>\n              Open multiple links with one click\n          </h4>\n          <BrowserRouter>\n              <div>\n                  <Route path='/' component={LinkOpener} />\n              </div>\n          </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}