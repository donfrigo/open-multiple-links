{"version":3,"sources":["components/link_opener.js","App.js","serviceWorker.js","index.js"],"names":["notification","key","ls","global","localStorage","JSON","parse","getItem","e","getFromLS","LinkOpener","props","_this","Object","_home_jani_Projects_multiple_links_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_home_jani_Projects_multiple_links_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_jani_Projects_multiple_links_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","term","error","stringify","onInputChange","bind","_home_jani_Projects_multiple_links_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","onFormSubmit","addLinksToInput","event","setState","target","value","preventDefault","openLinks","history","push","links","links_array","split","i","length","escaped","escapeRegExp","trim","validateLink","addHTTPS","window","open","qs","location","search","ignoreQueryPrefix","linkString","keys","forEach","index","concat","slice","setItem","_home_jani_Projects_multiple_links_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","onSubmit","className","placeholder","onChange","type","reactstrap__WEBPACK_IMPORTED_MODULE_9__","color","Component","link","test","string","replace","App","react_default","BrowserRouter","Route","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2edd208.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport qs from 'query-string';\nimport { UncontrolledAlert } from 'reactstrap';\n\nconst notification = getFromLS(\"notification\") || [];\n\nclass LinkOpener extends Component{\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: '',\n            error: false,\n            notification: JSON.parse(JSON.stringify(notification))\n        };\n\n        this.onInputChange = this.onInputChange.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.addLinksToInput = this.addLinksToInput.bind(this);\n    }\n\n    onInputChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    onFormSubmit(event) {\n        event.preventDefault();\n\n        // open links\n        this.openLinks(this.state.term);\n        this.setState({ term: ''});\n\n        //redirect to link search\n        this.props.history.push(\"/open-multiple-links\");\n    }\n\n    openLinks (links) {\n\n        let links_array = links.split(',');\n\n        for(var i = 0; i < links_array.length; i++) {\n            // remove whitespaces\n            let link = links_array[i].trim()\n            let escaped = escapeRegExp(link)\n            escaped = addHTTPS(escaped)\n            if (validateLink(escaped)){\n                window.open(escaped, i);\n            }\n        }\n    }\n\n    addLinksToInput(term) {\n       this.setState({term})\n    }\n\n    componentDidMount() {\n        let links = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\n\n        let linkString = '';\n\n        try {\n            Object.keys(links).forEach(function(key,index) {\n\n                const escaped = escapeRegExp(links[key])\n                if (validateLink(escaped)){\n                    linkString = linkString.concat(escaped,', ')\n                }\n            });\n\n            // get rid of last comma and space\n            linkString = linkString.slice(0, -2)\n\n            this.addLinksToInput(linkString)\n        }\n        catch (e) {\n            this.setState({error: true})\n        }\n\n        // set cookie\n        saveToLS(\"notification\", 'set');\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onFormSubmit} className='input-group'>\n                    <input\n                        placeholder='www.youtube.com, www.gmail.com'\n                        className='form-control'\n                        value={this.state.term}\n                        onChange={this.onInputChange} />\n                    <span className='input-group-btn'>\n                   <button type='submit' className='btn btn-secondary'>Submit</button>\n               </span>\n                </form>\n                <br />\n                {this.state.notification !== 'set' &&\n                <UncontrolledAlert color=\"info\">\n                    If this is your first time here, you might have to enable pop-up windows for this site.\n                </UncontrolledAlert>\n                }\n                {this.state.error &&\n                <div className=\"alert alert-danger\">\n                    An error has occured! Please check your input!\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nfunction validateLink(link) {\n    const re = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n    return re.test(link);\n}\n\nfunction escapeRegExp(string){\n\n    try {\n        return string.replace(/[<*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    }\n    catch (e) {\n        this.setState({error: true})\n    }\n}\n\nfunction addHTTPS(link) {\n    const re = /^(http|https):/i\n    const https = 'https://'\n\n    if (!re.test(link)) {\n        // if no http:// or https://\n        // then we add https\n        return `${https}${link}`\n    }\n   return link\n}\n\nfunction getFromLS(key) {\n    let ls = {};\n    if (global.localStorage) {\n        try {\n            ls = JSON.parse(global.localStorage.getItem(\"open-multiple-links\")) || {};\n        } catch (e) {\n            /*Ignore*/\n        }\n    }\n    return ls[key];\n}\n\nfunction saveToLS(key, value) {\n    if (global.localStorage) {\n        global.localStorage.setItem(\n            \"open-multiple-links\",\n            JSON.stringify({\n                [key]: value\n            })\n        );\n    }\n}\n\nexport default LinkOpener","import React, { Component } from 'react';\nimport './App.css';\nimport LinkOpener from './components/link_opener';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n          <br />\n          <h4>\n              Open multiple links with one click\n          </h4>\n          <BrowserRouter>\n              <div>\n                  <Route path='/' component={LinkOpener} />\n              </div>\n          </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}